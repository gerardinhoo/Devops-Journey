name: CI/CD

on:
  push:
    branches: ['main']
  workflow_dispatch:

# Needed to push to GHCR with GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: gh-actions-node-docker
  REGISTRY: ghcr.io
  GH_USER: ${{ github.repository_owner }} # or hardcode: gerardinhoo

jobs:
  ci-build-test:
    runs-on: ubuntu-latest # fixed typo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install
        run: npm ci

      - name: Test
        run: npm test

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GH_USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.GH_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-ec2:
    needs: ci-build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Prepare tag vars
        id: prep
        run: echo "TAG=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }} # only if your GHCR repo is private
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            GH_USER="${{ github.repository_owner }}"
            TAG="${{ steps.prep.outputs.TAG }}"

            # Ensure Docker exists (compose plugin included on recent installs)
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi

            mkdir -p ~/app
            cd ~/app

            # Create compose.yml if missing (note: closing YAML must be flush-left, no spaces)
            if [ ! -f compose.yml ]; then
            cat > compose.yml <<'YAML'
            services:
            web:
               image: ghcr.io/${GH_USER}/gh-actions-node-docker:${TAG:-latest}
               container_name: ga-demo
               restart: unless-stopped
               ports:
                  - "80:3000"
               environment:
                  - NODE_ENV=production
            YAML
            fi

            # Login only if pulling a private image
            if [ -n "${GHCR_PAT:-}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GH_USER}" --password-stdin
            fi

            GH_USER="${GH_USER}" TAG="${TAG}" docker compose pull
            GH_USER="${GH_USER}" TAG="${TAG}" docker compose up -d

            docker image prune -f
