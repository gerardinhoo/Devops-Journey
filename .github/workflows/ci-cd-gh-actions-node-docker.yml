name: Github Actios CI/CD

on:
  push:
    branches: ['main']
    paths:
      - 'gh-actions-node-docker/**'
      - '.github/workflows/ci-cd-gh-actions-node-docker.yml'
  workflow_dispatch:

# Needed to push to GHCR with GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: gh-actions-node-docker
  REGISTRY: ghcr.io
  GH_USER: ${{ github.repository_owner }}

jobs:
  ci-build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: gh-actions-node-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install
        run: npm ci

      - name: Test
        run: npm test

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: ./gh-actions-node-docker #build from subfolder
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GH_USER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.GH_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-ec2:
    needs: ci-build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout (for deploy)
        uses: actions/checkout@v4

      - name: Ensure remote dir
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: mkdir -p /home/${{ secrets.EC2_USER }}/app

      - name: Upload compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: 'gh-actions-node-docker/compose.yml'
          target: '/home/${{ secrets.EC2_USER }}/app/'
          strip_components: 1
          overwrite: true

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }} # only if package is private
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            GH_USER="${{ github.repository_owner }}"
            TAG="${{ github.sha }}"
            REMOTE_DIR="/home/${{ secrets.EC2_USER }}/app"   # ðŸ‘ˆ keep consistent
            COMPOSE_FILE="${REMOTE_DIR}/compose.yml"
            OVERRIDE_FILE="${REMOTE_DIR}/compose.override.yml"
            IMAGE="ghcr.io/${GH_USER}/gh-actions-node-docker:${TAG}"

            # Ensure Docker & Compose exist (no upgrades)
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi
            docker compose version || (sudo apt-get update -y && sudo apt-get install -y docker-compose-plugin || true)

            # Light cleanup to avoid ENOSPC
            sudo docker system prune -af || true
            sudo apt-get clean || true
            sudo rm -rf /var/lib/apt/lists/* || true

            # Sanity check we have the base compose
            test -f "$COMPOSE_FILE" || { echo "Missing $COMPOSE_FILE"; ls -al "$REMOTE_DIR"; exit 1; }

            # Generate a tiny override with the fully-resolved image
            cat > "$OVERRIDE_FILE" <<EOF
            services:
              web:
                image: ${IMAGE}
            EOF
            echo "Using image: ${IMAGE}"

            # Log in to GHCR only if private
            if [ -n "${GHCR_PAT:-}" ]; then
              echo "${GHCR_PAT}" | sudo docker login ghcr.io -u "${GH_USER}" --password-stdin
            fi

            # Pull & deploy with override file
            sudo docker compose -f "$COMPOSE_FILE" -f "$OVERRIDE_FILE" pull
            sudo docker compose -f "$COMPOSE_FILE" -f "$OVERRIDE_FILE" up -d   # âœ… keep only this one

            # Wait up to ~60s for the app; try /health on :80 and :3000
            echo "Waiting for app to be ready..."
            for i in {1..30}; do
              if curl -fsS http://localhost/health >/dev/null 2>&1 || \
                 curl -fsS http://localhost:3000/health >/dev/null 2>&1; then
                echo "App is up âœ…"
                ready=1
                break
              fi
              echo "Still starting... ($i/30)"; sleep 2
            done

            # If still not ready, show container logs and fail
            if [ -z "${ready:-}" ]; then
              echo "Health check failed. Showing logs:"
              sudo docker compose -f "$COMPOSE_FILE" -f "$OVERRIDE_FILE" logs --no-color --tail=200 web || sudo docker logs ga-demo || true
              exit 1
            fi
