pipeline {
  agent any
  options { timestamps() }

  tools {
    jdk   'jdk17'
    maven 'maven-3.9'
  }

  parameters {
    booleanParam(name: 'RUN_SONAR',  defaultValue: false, description: 'Run SonarQube analysis')
    booleanParam(name: 'RUN_TRIVY',  defaultValue: true,  description: 'Scan image with Trivy')
    booleanParam(name: 'PUSH_IMAGE', defaultValue: false, description: 'Push image to registry')
    booleanParam(name: 'DEPLOY',     defaultValue: true,  description: 'Deploy container on this node')
  }

  environment {
    APP       = 'country-weather'
    IMAGE     = 'gerardinhoo/country-weather-dashboard'   // set to your registry repo if pushing
    COMMIT    = "${env.GIT_COMMIT ?: 'local'}"
    IMG_TAG   = "${env.BUILD_NUMBER}-${COMMIT.take(7)}"
    HOST_PORT = '8082'          // Jenkins uses 8080
    CONT_PORT = '8080'          // Tomcat inside container
    WORKDIR   = 'Jenkins-Work/country-weather-dashboard'

    // Nexus
    NEXUS_BASE      = 'http://3.150.94.17:8081'
    NEXUS_RELEASES  = "${NEXUS_BASE}/repository/maven-releases"
    NEXUS_SNAPSHOTS = "${NEXUS_BASE}/repository/maven-snapshots"
    NEXUS_PUBLIC    = "${NEXUS_BASE}/repository/maven-public"
  }

  stages {

    stage('Checkout') { steps { checkout scm } }

    stage('Tool Versions') {
      steps {
        sh 'java -version'
        sh 'mvn -version'
        sh 'docker --version || true'
      }
    }

    stage('Build & Unit Test') {
      steps { dir("${WORKDIR}") { sh 'mvn -B -e clean verify' } }
      post { always { dir("${WORKDIR}") { junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml' } } }
    }

    stage('SonarQube') {
      when { expression { return params.RUN_SONAR } }
      steps {
        dir("${WORKDIR}") {
          withSonarQubeEnv('SonarQubeServer') {
            withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
              sh '''
                mvn -B sonar:sonar \
                  -Dsonar.login=$SONAR_TOKEN \
                  -Dsonar.projectKey=country-weather-dashboard \
                  -Dsonar.projectName=country-weather-dashboard \
                  -Dsonar.java.binaries=target/classes
              '''
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      when { expression { return params.RUN_SONAR } }
      steps { timeout(time: 5, unit: 'MINUTES') { waitForQualityGate abortPipeline: true } }
    }

    stage('Publish to Nexus (mvn deploy)') {
      steps {
        dir("${WORKDIR}") {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
              cat > .mvn-settings-nexus.xml <<EOF
              <settings>
                <mirrors>
                  <mirror><id>nexus</id><mirrorOf>*</mirrorOf><url>'"${NEXUS_PUBLIC}"'</url></mirror>
                </mirrors>
                <servers>
                  <server><id>nexus-releases</id><username>'"${NEXUS_USER}"'</username><password>'"${NEXUS_PASS}"'</password></server>
                  <server><id>nexus-snapshots</id><username>'"${NEXUS_USER}"'</username><password>'"${NEXUS_PASS}"'</password></server>
                </servers>
              </settings>
              EOF
              mvn -s .mvn-settings-nexus.xml -B -DskipTests deploy
            '''
          }
        }
      }
    }

    stage('Pull WAR from Nexus (use released artifact)') {
      steps {
        dir("${WORKDIR}") {
          withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh '''
              VERSION=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)
              mvn -s .mvn-settings-nexus.xml -B dependency:get \
                -DremoteRepositories="${NEXUS_RELEASES},${NEXUS_SNAPSHOTS}" \
                -Dartifact=com.ge.dashboard:country-weather-dashboard:${VERSION}:war \
                -Dtransitive=false
              LOCAL_REPO=$(mvn -q -DforceStdout help:evaluate -Dexpression=settings.localRepository)
              SRC="$LOCAL_REPO/com/ge/dashboard/country-weather-dashboard/${VERSION}/country-weather-dashboard-${VERSION}.war"
              mkdir -p target && cp "$SRC" target/country-weather-dashboard.war
              ls -lh target/country-weather-dashboard.war
            '''
          }
        }
      }
    }

    stage('Build Image (from Nexus WAR)') {
      steps {
        dir("${WORKDIR}") {
          sh """
            docker build -t ${IMAGE}:${IMG_TAG} -t ${IMAGE}:latest .
            docker images | head -n 10
          """
        }
      }
    }

    stage('Trivy Scan') {
      when { expression { return params.RUN_TRIVY } }
      steps {
        sh """
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --no-progress --exit-code 1 \
            --severity HIGH,CRITICAL ${IMAGE}:${IMG_TAG}
        """
      }
    }

    stage('Push Image') {
      when { expression { return params.PUSH_IMAGE } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'registry-creds', usernameVariable: 'REG_USER', passwordVariable: 'REG_PASS')]) {
          sh """
            echo "$REG_PASS" | docker login -u "$REG_USER" --password-stdin
            docker push ${IMAGE}:${IMG_TAG}
            docker push ${IMAGE}:latest
          """
        }
      }
    }

    stage('Deploy (Dockerized Tomcat)') {
      when { expression { return params.DEPLOY } }
      steps {
        sh """
          docker rm -f ${APP} || true
          docker run -d --name ${APP} --restart unless-stopped \
            -p ${HOST_PORT}:${CONT_PORT} ${IMAGE}:${IMG_TAG}
        """
      }
    }

    stage('Smoke Test') {
      steps {
        sh '''
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082/ || true)
            [ "$code" = "200" ] && break
            sleep 2
          done
          curl -sSf "http://localhost:8082/search?q=Ghana" | grep -qi "Ghana"
        '''
      }
    }
  }

  post {
    success {
      script {
        try {
          slackSend channel: '#all-gerard-eklu-the-dev',
            message: "✅ ${env.JOB_NAME} #${env.BUILD_NUMBER} OK — ${env.BUILD_URL} (${env.IMAGE}:${env.IMG_TAG})"
        } catch (e) { echo 'Slack not configured; skipping.' }
      }
    }
    failure {
      script {
        try {
          slackSend channel: '#all-gerard-eklu-the-dev',
            message: "❌ ${env.JOB_NAME} #${env.BUILD_NUMBER} FAILED — ${env.BUILD_URL}"
        } catch (e) { echo 'Slack not configured; skipping.' }
      }
    }
  }
}
